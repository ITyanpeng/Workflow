<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath*:config.properties
				</value>
			</list>
		</property>
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
	    	
	</bean>
	
	<!-- MyBatis Database Layer -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="mapperLocations" value="classpath*:/cn/sccl/**/model/*.xml" />
		<property name="dataSource" ref="dataSource" />
				
	</bean>
	
	<bean id="sqlSessionTemplate"     class="org.mybatis.spring.SqlSessionTemplate">  
          <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
      
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" lazy-init="true"/>
    
    <bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">   
        <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>   
    </bean>   

	<!--
		the transactional advice (what 'happens'; see the <aop:advisor/> bean
		below)
	-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="createIfLog" propagation="REQUIRES_NEW" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" rollback-for="cn.sccl.common.service.impl.BusinessException"/>
		</tx:attributes>
	</tx:advice>

	<!--
		ensure that the above transactional advice runs for any execution of
		an operation defined by the FooService interface
	-->
	<aop:config>
		<aop:pointcut id="managerOperation" expression="execution(* cn.sccl.*.*.service.*Manager.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="managerOperation" />
	</aop:config>
	
	

	<bean id="contextUtil" class="cn.sccl.common.util.ContextUtil"/>
	<bean id="configUtil" class="org.apache.commons.configuration.PropertiesConfiguration" >
        <constructor-arg type="String">
             <value>${config.filename}</value>
        </constructor-arg>
 	</bean>
	
	<bean class="cn.sccl.common.web.CustomerControllerClassNameHandlerMapping" />
	<bean class="org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator" />
	
	<!-- 定义异常信息的资源文件 -->
	<bean id="messageCode" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>exceptionCode</value>
            </list>
        </property>
    </bean>

</beans>